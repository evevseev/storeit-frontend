/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/orgs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get list of Organizations */
        get: operations["getOrganizations"];
        put?: never;
        /** Create Organization */
        post: operations["createOrganization"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/orgs/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Organization ID */
                id: string;
            };
            cookie?: never;
        };
        /** Get Organization by ID */
        get: operations["getOrganizationById"];
        /** Update Organization */
        put: operations["updateOrganization"];
        post?: never;
        /** Delete Organization */
        delete: operations["deleteOrganization"];
        options?: never;
        head?: never;
        /** Update Organization */
        patch: operations["patchOrganization"];
        trace?: never;
    };
    "/units": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get list of Organization Units */
        get: operations["getOrganizationUnits"];
        put?: never;
        /** Create Organization Unit */
        post: operations["createUnit"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/units/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Unit ID */
                id: string;
            };
            cookie?: never;
        };
        /** Get Unit by ID */
        get: operations["getOrganizationUnitById"];
        /** Update Organization Unit */
        put: operations["updateOrganizationUnit"];
        post?: never;
        /** Delete Organization Unit */
        delete: operations["deleteOrganizationUnit"];
        options?: never;
        head?: never;
        /** Patch Organization Unit */
        patch: operations["patchOrganizationUnit"];
        trace?: never;
    };
    "/storage-groups": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get list of Storage Groups */
        get: operations["getStorageGroups"];
        put?: never;
        /** Create Storage Group */
        post: operations["createStorageGroup"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/storage-groups/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Storage Group ID */
                id: string;
            };
            cookie?: never;
        };
        /** Get Storage Group by ID */
        get: operations["getStorageGroupById"];
        /** Update Storage Group */
        put: operations["updateStorageGroup"];
        post?: never;
        /** Delete Storage Group */
        delete: operations["deleteStorageGroup"];
        options?: never;
        head?: never;
        /** Patch Storage Group */
        patch: operations["patchStorageGroup"];
        trace?: never;
    };
    "/items": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get list of Items */
        get: operations["getItems"];
        put?: never;
        /** Create Item */
        post: operations["createItem"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/items/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Item ID */
                id: string;
            };
            cookie?: never;
        };
        /** Get Item by ID */
        get: operations["getItemById"];
        /** Update Item */
        put: operations["updateItem"];
        post?: never;
        /** Delete Item */
        delete: operations["deleteItem"];
        options?: never;
        head?: never;
        /** Patch Item */
        patch: operations["patchItem"];
        trace?: never;
    };
    "/auth/oauth2/yandex": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Exchange Yandex Access token for Session token */
        post: operations["exchangeYandexAccessToken"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/logout": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Logout user */
        get: operations["logout"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Current User */
        get: operations["getCurrentUser"];
        /** Update Current User */
        put: operations["putCurrentUser"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Update Current User */
        patch: operations["patchCurrentUser"];
        trace?: never;
    };
    "/cells-groups": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get list of Cells Groups */
        get: operations["getCellsGroups"];
        put?: never;
        /** Create Cells Group */
        post: operations["createCellsGroup"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cells-groups/{groupId}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Cells Group ID */
                groupId: string;
            };
            cookie?: never;
        };
        /** Get Cells Group by ID */
        get: operations["getCellsGroupById"];
        /** Update Cells Group */
        put: operations["updateCellsGroup"];
        post?: never;
        /** Delete Cells Group */
        delete: operations["deleteCellsGroup"];
        options?: never;
        head?: never;
        /** Patch Cells Group */
        patch: operations["patchCellsGroup"];
        trace?: never;
    };
    "/cells-groups/{groupId}/cells": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                groupId: string;
            };
            cookie?: never;
        };
        /** Get list of Cells */
        get: operations["getCells"];
        put?: never;
        /** Create Cells */
        post: operations["createCell"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cells-groups/{groupId}/cells/{cellId}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                groupId: string;
                cellId: string;
            };
            cookie?: never;
        };
        /** Get Cell by ID */
        get: operations["getCellById"];
        /** Update Cell */
        put: operations["updateCell"];
        post?: never;
        /** Delete Cell */
        delete: operations["deleteCell"];
        options?: never;
        head?: never;
        /** Patch Cell */
        patch: operations["patchCell"];
        trace?: never;
    };
    "/instances": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get list of Instances */
        get: operations["getInstances"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/items/{itemId}/instances": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Item ID */
                itemId: string;
            };
            cookie?: never;
        };
        /** Get list of Instances For Item */
        get: operations["getInstancesByItemId"];
        put?: never;
        /** Create Instance For Item */
        post: operations["createInstanceForItem"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/instances/{instanceId}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Instance ID */
                instanceId: string;
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Delete Instance by ID */
        delete: operations["deleteInstanceById"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api-tokens": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get list of Service API Tokens */
        get: operations["getApiTokens"];
        put?: never;
        /** Create Service API Token */
        post: operations["createApiToken"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api-tokens/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Revoke Service API Token */
        delete: operations["revokeApiToken"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** @description Represents error object */
        Error: {
            error_id: string;
            message: string;
        };
        OrganizationBase: {
            /** @example Exotic */
            name: string;
            /** @example exotic */
            subdomain: string;
        };
        Organization: {
            /**
             * Format: uuid
             * @example def3df1a-7b8f-4552-b437-a1eab851403f
             */
            readonly id: string;
        } & components["schemas"]["OrganizationBase"];
        GetOrganizationsResponse: {
            data: components["schemas"]["Organization"][];
        };
        CreateOrganizationRequest: components["schemas"]["OrganizationBase"];
        CreateOrganizationResponse: {
            data: components["schemas"]["Organization"];
        };
        GetOrganizationByIdResponse: {
            data: components["schemas"]["Organization"];
        };
        UpdateOrganizationRequest: components["schemas"]["Organization"];
        UpdateOrganizationResponse: {
            data: components["schemas"]["Organization"][];
        };
        OrganizationPatch: {
            /** @example Exotic */
            name?: string;
            /** @example exotic */
            subdomain?: string;
        };
        PatchOrganizationRequest: components["schemas"]["OrganizationPatch"];
        PatchOrganizationResponse: {
            data?: components["schemas"]["Organization"][];
        };
        UnitBase: {
            /** @example Moscow */
            name: string;
            /** @example MWS */
            alias: string;
            /** @example 123 Main St, Moscow, Russia */
            address?: string | null;
        };
        Unit: {
            /**
             * Format: uuid
             * @example def3df1a-7b8f-4552-b437-a1eab851403f
             */
            readonly id: string;
        } & components["schemas"]["UnitBase"] & {
            address: string | null;
        };
        GetOrganizationUnitsResponse: {
            data: components["schemas"]["Unit"][];
        };
        CreateOrganizationUnitRequest: components["schemas"]["UnitBase"];
        CreateOrganizationUnitResponse: {
            data: components["schemas"]["Unit"];
        };
        GetOrganizationUnitByIdResponse: {
            data: components["schemas"]["Unit"];
        };
        UpdateOrganizationUnitRequest: components["schemas"]["UnitBase"];
        UpdateOrganizationUnitResponse: {
            data: components["schemas"]["Unit"][];
        };
        UnitPatch: {
            /** @example Moscow */
            name?: string;
            /** @example MWS */
            alias?: string;
            address?: string | null;
        };
        PatchOrganizationUnitRequest: components["schemas"]["UnitPatch"];
        PatchOrganizationUnitResponse: {
            data: components["schemas"]["Unit"][];
        };
        StorageGroupBase: {
            /**
             * Format: uuid
             * @example def3df1a-7b8f-4552-b437-a1eab851403f
             */
            parentId?: string | null;
            /** @example Main Warehouse */
            name: string;
            /** @example MW */
            alias: string;
            /**
             * Format: uuid
             * @example def3df1a-7b8f-4552-b437-a1eab851403f
             */
            unitId: string;
        };
        StorageGroup: {
            /**
             * Format: uuid
             * @example def3df1a-7b8f-4552-b437-a1eab851403f
             */
            readonly id: string;
            /**
             * Format: uuid
             * @example def3df1a-7b8f-4552-b437-a1eab851403f
             */
            parentId: string | null;
        } & components["schemas"]["StorageGroupBase"];
        GetStorageGroupsResponse: {
            data: components["schemas"]["StorageGroup"][];
        };
        CreateStorageGroupRequest: components["schemas"]["StorageGroupBase"];
        CreateStorageGroupResponse: {
            data: components["schemas"]["StorageGroup"];
        };
        GetStorageGroupByIdResponse: {
            data: components["schemas"]["StorageGroup"];
        };
        UpdateStorageGroupRequest: components["schemas"]["StorageGroupBase"];
        UpdateStorageGroupResponse: {
            data: components["schemas"]["StorageGroup"][];
        };
        StorageGroupPatch: {
            /**
             * Format: uuid
             * @example def3df1a-7b8f-4552-b437-a1eab851403f
             */
            parentId?: string | null;
            /** @example Main Warehouse */
            name?: string;
            /** @example MW */
            alias?: string;
            /**
             * Format: uuid
             * @example def3df1a-7b8f-4552-b437-a1eab851403f
             */
            unitId?: string;
        };
        PatchStorageGroupRequest: components["schemas"]["StorageGroupPatch"];
        PatchStorageGroupResponse: {
            data: components["schemas"]["StorageGroup"][];
        };
        ItemBase: {
            /** Format: uuid */
            readonly id?: string;
            /** @example Item 1 */
            name: string;
            /** @example Description */
            description?: string | null;
        };
        Item: components["schemas"]["ItemBase"] & {
            /** Format: uuid */
            readonly id: string;
            description: string | null;
        };
        ItemVariantBase: {
            /** @example Variant 1 */
            name: string;
            /** @example 123456789012 */
            article?: string | null;
            /** @example 1234567890123 */
            ean13?: number | null;
        };
        ItemVariant: {
            /** Format: uuid */
            readonly id: string;
        } & components["schemas"]["ItemVariantBase"] & {
            /** @example 123456789012 */
            article: string | null;
            /** @example 1234567890123 */
            ean13: number | null;
        };
        ItemForList: components["schemas"]["Item"] & {
            variants: components["schemas"]["ItemVariant"][];
        };
        GetItemsResponse: {
            data: components["schemas"]["ItemForList"][];
        };
        ItemCreate: components["schemas"]["ItemBase"] & {
            variants: components["schemas"]["ItemVariantBase"][];
        };
        CreateItemRequest: components["schemas"]["ItemCreate"];
        CellBase: {
            /** Format: uuid */
            readonly id: string;
            alias: string;
            row: number;
            level: number;
            position: number;
        };
        CellForInstance: components["schemas"]["CellBase"] & {
            cellPath?: {
                /** Format: uuid */
                id?: string;
                alias?: string;
                /** @enum {string} */
                objectType?: "cell" | "cells_group" | "storage_group";
            }[];
        };
        ItemFull: components["schemas"]["Item"] & {
            variants?: components["schemas"]["ItemVariant"][];
            instances?: {
                /** Format: uuid */
                id?: string;
                /** @enum {string} */
                status?: "available" | "reserved" | "consumed";
                variant: components["schemas"]["ItemVariant"];
                cell?: components["schemas"]["CellForInstance"];
            }[];
        };
        CreateItemResponse: {
            data: components["schemas"]["ItemFull"];
        };
        GetItemByIdResponse: {
            data: components["schemas"]["ItemFull"];
        };
        ItemVariantEdit: {
            /** Format: uuid */
            id: string;
        } & components["schemas"]["ItemVariantBase"];
        UpdateItemRequest: components["schemas"]["ItemCreate"] & {
            variants: components["schemas"]["ItemVariantEdit"][];
        };
        UpdateItemResponse: {
            data: components["schemas"]["ItemFull"];
        };
        ItemVariantPatchInItem: {
            /** Format: uuid */
            id?: string;
            /** @example Variant 1 */
            name?: string;
            /** @example 123456789012 */
            article?: string | null;
            /** @example 1234567890123 */
            ean13?: number | null;
        };
        ItemPatch: {
            /** @example Item 1 */
            name?: string;
            /** @example Description */
            description?: string | null;
            variants?: components["schemas"]["ItemVariantPatchInItem"][];
        };
        PatchItemRequest: components["schemas"]["ItemPatch"];
        PatchItemResponse: {
            data: components["schemas"]["ItemFull"];
        };
        User: {
            /** Format: uuid */
            id: string;
            first_name: string;
            last_name: string;
            middle_name: string | null;
            email: string;
        };
        GetCurrentUserResponse: components["schemas"]["User"];
        UserUpdate: {
            first_name: string;
            last_name: string;
            middle_name: string | null;
        };
        UpdateCurrentUserRequest: components["schemas"]["UserUpdate"];
        UserPatch: {
            first_name: string;
            last_name: string;
            middle_name: string | null;
        };
        PatchCurrentUserRequest: components["schemas"]["UserPatch"];
        CellGroupBase: {
            /** Format: uuid */
            readonly id: string;
            name: string;
            alias: string;
            /** Format: uuid */
            storage_group_id: string;
        };
        GetCellsGroupsResponse: {
            data: components["schemas"]["CellGroupBase"][];
        };
        CreateCellsGroupRequest: components["schemas"]["CellGroupBase"];
        CreateCellsGroupResponse: {
            data: components["schemas"]["CellGroupBase"];
        };
        GetCellsGroupByIdResponse: {
            data: components["schemas"]["CellGroupBase"];
        };
        UpdateCellsGroupRequest: components["schemas"]["CellGroupBase"];
        UpdateCellsGroupResponse: {
            data: components["schemas"]["CellGroupBase"];
        };
        CellGroupPatch: {
            name?: string;
            alias?: string;
            /** Format: uuid */
            storage_group_id?: string;
        };
        PatchCellsGroupRequest: components["schemas"]["CellGroupPatch"];
        PatchCellsGroupResponse: {
            data: components["schemas"]["CellGroupBase"];
        };
        GetCellsResponse: {
            data: components["schemas"]["CellBase"][];
        };
        CreateCellRequest: components["schemas"]["CellBase"];
        CreateCellResponse: {
            data: components["schemas"]["CellBase"];
        };
        GetCellByIdResponse: components["schemas"]["CellBase"];
        UpdateCellRequest: components["schemas"]["CellBase"];
        UpdateCellResponse: {
            data: components["schemas"]["CellBase"];
        };
        CellPatch: {
            alias?: string;
            row?: number;
            level?: number;
            position?: number;
        };
        PatchCellRequest: components["schemas"]["CellPatch"];
        PatchCellResponse: {
            data: components["schemas"]["CellBase"];
        };
        InstanceFull: {
            /**
             * Format: uuid
             * @description Instance ID
             */
            readonly id: string;
            /** @enum {string} */
            status: "available" | "reserved" | "consumed";
            item?: components["schemas"]["Item"];
            variant: components["schemas"]["ItemVariant"];
            cell: components["schemas"]["CellForInstance"];
        }[];
        GetInstancesResponse: {
            data: [
                components["schemas"]["InstanceFull"]
            ];
        };
        InstanceForItem: {
            /** Format: uuid */
            id: string;
            /** @enum {string} */
            status: "available" | "reserved" | "consumed";
            variant: components["schemas"]["ItemVariant"];
            cell: components["schemas"]["CellForInstance"];
        }[];
        GetInstancesByItemIdResponse: {
            data: components["schemas"]["InstanceForItem"][];
        };
        InstanceCreateForItem: {
            /** Format: uuid */
            variantId: string;
            /** Format: uuid */
            cellId?: string | null;
        };
        CreateInstanceForItemRequest: components["schemas"]["InstanceCreateForItem"];
        CreateInstanceForItemResponse: {
            data: components["schemas"]["InstanceForItem"][];
        };
        Token: {
            /** Format: uuid */
            readonly id: string;
            /** @description The name of the token */
            name: string;
            /** @description The token secret */
            token: string;
        };
        GetApiTokensResponse: {
            data: components["schemas"]["Token"][];
        };
        TokenCreate: {
            /** @description The name of the token */
            name: string;
        };
        CreateApiTokenRequest: components["schemas"]["TokenCreate"];
        CreateApiTokenResponse: {
            data: components["schemas"]["Token"];
        };
    };
    responses: {
        /** @description General Error */
        "default-error": {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["Error"];
            };
        };
        /** @description Auth response */
        AuthResponse: {
            headers: {
                "Set-Cookie": string;
                [name: string]: unknown;
            };
            content?: never;
        };
        /** @description Logout response */
        LogoutResponse: {
            headers: {
                "Set-Cookie": string;
                [name: string]: unknown;
            };
            content?: never;
        };
    };
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    getOrganizations: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetOrganizationsResponse"];
                };
            };
            default: components["responses"]["default-error"];
        };
    };
    createOrganization: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateOrganizationRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreateOrganizationResponse"];
                };
            };
            default: components["responses"]["default-error"];
        };
    };
    getOrganizationById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Organization ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetOrganizationByIdResponse"];
                };
            };
            default: components["responses"]["default-error"];
        };
    };
    updateOrganization: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Organization ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateOrganizationRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UpdateOrganizationResponse"];
                };
            };
            default: components["responses"]["default-error"];
        };
    };
    deleteOrganization: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Organization ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            default: components["responses"]["default-error"];
        };
    };
    patchOrganization: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Organization ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PatchOrganizationRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PatchOrganizationResponse"];
                };
            };
            default: components["responses"]["default-error"];
        };
    };
    getOrganizationUnits: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetOrganizationUnitsResponse"];
                };
            };
            default: components["responses"]["default-error"];
        };
    };
    createUnit: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateOrganizationUnitRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreateOrganizationUnitResponse"];
                };
            };
            default: components["responses"]["default-error"];
        };
    };
    getOrganizationUnitById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Unit ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetOrganizationUnitByIdResponse"];
                };
            };
            default: components["responses"]["default-error"];
        };
    };
    updateOrganizationUnit: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Unit ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateOrganizationUnitRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UpdateOrganizationUnitResponse"];
                };
            };
            default: components["responses"]["default-error"];
        };
    };
    deleteOrganizationUnit: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Unit ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            default: components["responses"]["default-error"];
        };
    };
    patchOrganizationUnit: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Unit ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PatchOrganizationUnitRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PatchOrganizationUnitResponse"];
                };
            };
            default: components["responses"]["default-error"];
        };
    };
    getStorageGroups: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetStorageGroupsResponse"];
                };
            };
            default: components["responses"]["default-error"];
        };
    };
    createStorageGroup: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateStorageGroupRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreateStorageGroupResponse"];
                };
            };
            default: components["responses"]["default-error"];
        };
    };
    getStorageGroupById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Storage Group ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetStorageGroupByIdResponse"];
                };
            };
            default: components["responses"]["default-error"];
        };
    };
    updateStorageGroup: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Storage Group ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateStorageGroupRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UpdateStorageGroupResponse"];
                };
            };
            default: components["responses"]["default-error"];
        };
    };
    deleteStorageGroup: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Storage Group ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            default: components["responses"]["default-error"];
        };
    };
    patchStorageGroup: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Storage Group ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PatchStorageGroupRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PatchStorageGroupResponse"];
                };
            };
            default: components["responses"]["default-error"];
        };
    };
    getItems: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetItemsResponse"];
                };
            };
            default: components["responses"]["default-error"];
        };
    };
    createItem: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateItemRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreateItemResponse"];
                };
            };
            default: components["responses"]["default-error"];
        };
    };
    getItemById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Item ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetItemByIdResponse"];
                };
            };
            default: components["responses"]["default-error"];
        };
    };
    updateItem: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Item ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateItemRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UpdateItemResponse"];
                };
            };
            default: components["responses"]["default-error"];
        };
    };
    deleteItem: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Item ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            default: components["responses"]["default-error"];
        };
    };
    patchItem: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Item ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PatchItemRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PatchItemResponse"];
                };
            };
            default: components["responses"]["default-error"];
        };
    };
    exchangeYandexAccessToken: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description Yandex Access token */
                    access_token: string;
                };
            };
        };
        responses: {
            200: components["responses"]["AuthResponse"];
            default: components["responses"]["default-error"];
        };
    };
    logout: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["LogoutResponse"];
            default: components["responses"]["default-error"];
        };
    };
    getCurrentUser: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetCurrentUserResponse"];
                };
            };
            default: components["responses"]["default-error"];
        };
    };
    putCurrentUser: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateCurrentUserRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetCurrentUserResponse"];
                };
            };
            default: components["responses"]["default-error"];
        };
    };
    patchCurrentUser: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PatchCurrentUserRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetCurrentUserResponse"];
                };
            };
            default: components["responses"]["default-error"];
        };
    };
    getCellsGroups: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetCellsGroupsResponse"];
                };
            };
            default: components["responses"]["default-error"];
        };
    };
    createCellsGroup: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateCellsGroupRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreateCellsGroupResponse"];
                };
            };
            default: components["responses"]["default-error"];
        };
    };
    getCellsGroupById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Cells Group ID */
                groupId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetCellsGroupByIdResponse"];
                };
            };
            default: components["responses"]["default-error"];
        };
    };
    updateCellsGroup: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Cells Group ID */
                groupId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateCellsGroupRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UpdateCellsGroupResponse"];
                };
            };
            default: components["responses"]["default-error"];
        };
    };
    deleteCellsGroup: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Cells Group ID */
                groupId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            default: components["responses"]["default-error"];
        };
    };
    patchCellsGroup: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Cells Group ID */
                groupId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PatchCellsGroupRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PatchCellsGroupResponse"];
                };
            };
            default: components["responses"]["default-error"];
        };
    };
    getCells: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                groupId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetCellsResponse"];
                };
            };
            default: components["responses"]["default-error"];
        };
    };
    createCell: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                groupId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateCellRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreateCellResponse"];
                };
            };
            default: components["responses"]["default-error"];
        };
    };
    getCellById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                groupId: string;
                cellId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetCellByIdResponse"];
                };
            };
            default: components["responses"]["default-error"];
        };
    };
    updateCell: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                groupId: string;
                cellId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateCellRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UpdateCellResponse"];
                };
            };
            default: components["responses"]["default-error"];
        };
    };
    deleteCell: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                groupId: string;
                cellId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            default: components["responses"]["default-error"];
        };
    };
    patchCell: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                groupId: string;
                cellId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PatchCellRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PatchCellResponse"];
                };
            };
            default: components["responses"]["default-error"];
        };
    };
    getInstances: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetInstancesResponse"];
                };
            };
            default: components["responses"]["default-error"];
        };
    };
    getInstancesByItemId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Item ID */
                itemId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetInstancesByItemIdResponse"];
                };
            };
            default: components["responses"]["default-error"];
        };
    };
    createInstanceForItem: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Item ID */
                itemId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateInstanceForItemRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreateInstanceForItemResponse"];
                };
            };
            default: components["responses"]["default-error"];
        };
    };
    deleteInstanceById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Instance ID */
                instanceId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            default: components["responses"]["default-error"];
        };
    };
    getApiTokens: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetApiTokensResponse"];
                };
            };
            default: components["responses"]["default-error"];
        };
    };
    createApiToken: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateApiTokenRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreateApiTokenResponse"];
                };
            };
            default: components["responses"]["default-error"];
        };
    };
    revokeApiToken: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            default: components["responses"]["default-error"];
        };
    };
}
