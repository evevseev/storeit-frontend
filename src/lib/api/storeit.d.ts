/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/orgs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get list of user Organizations */
        get: operations["getOrganizations"];
        put?: never;
        /** Create new Organization */
        post: operations["createOrganization"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/orgs/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Organization ID */
                id: string;
            };
            cookie?: never;
        };
        /** Get Organization by ID */
        get: operations["getOrganizationById"];
        /** Update Organization */
        put: operations["updateOrganization"];
        post?: never;
        /** Delete Organization */
        delete: operations["deleteOrganization"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/units": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get list of Organization Units */
        get: operations["getOrganizationUnits"];
        put?: never;
        /** Create Organization Unit */
        post: operations["createUnit"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/units/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Unit ID */
                id: string;
            };
            cookie?: never;
        };
        /** Get Unit by ID */
        get: operations["getOrganizationUnitById"];
        /** Update Organization Unit */
        put: operations["updateOrganizationUnit"];
        post?: never;
        /** Delete Organization Unit */
        delete: operations["deleteOrganizationUnit"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/storage-groups": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get list of Storage Groups */
        get: operations["getStorageGroups"];
        put?: never;
        /** Create Storage Group */
        post: operations["createStorageGroup"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/storage-groups/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Storage Group ID */
                id: string;
            };
            cookie?: never;
        };
        /** Get Storage Group by ID */
        get: operations["getStorageGroupById"];
        /** Update Storage Group */
        put: operations["updateStorageGroup"];
        post?: never;
        /** Delete Storage Group */
        delete: operations["deleteStorageGroup"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cells-groups": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get list of Cells Groups */
        get: operations["getCellsGroups"];
        put?: never;
        /** Create Cells Group */
        post: operations["createCellsGroup"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cells-groups/{groupId}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Cells Group ID */
                groupId: string;
            };
            cookie?: never;
        };
        /** Get Cells Group by ID */
        get: operations["getCellsGroupById"];
        /** Update Cells Group */
        put: operations["updateCellsGroup"];
        post?: never;
        /** Delete Cells Group */
        delete: operations["deleteCellsGroup"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cells-groups/{groupId}/cells": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                groupId: string;
            };
            cookie?: never;
        };
        /** Get list of Cells */
        get: operations["getCells"];
        put?: never;
        /** Create Cells */
        post: operations["createCell"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cells/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        /** Get Cell by ID */
        get: operations["getCellById"];
        /** Update Cell */
        put: operations["updateCell"];
        post?: never;
        /** Delete Cell */
        delete: operations["deleteCell"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/items": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get list of Items */
        get: operations["getItems"];
        put?: never;
        /** Create Item */
        post: operations["createItem"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/items/{id}/variants": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Item ID */
                id: string;
            };
            cookie?: never;
        };
        /** Get Item Variants */
        get: operations["getItemVariants"];
        put?: never;
        /** Create Item Variant */
        post: operations["createItemVariant"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/items/{id}/variants/{variantId}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Item ID */
                id: string;
                /** @description Variant ID */
                variantId: string;
            };
            cookie?: never;
        };
        /** Get Item Variant By ID */
        get: operations["getItemVariantById"];
        /** Update Item Variant By ID */
        put: operations["updateItemVariant"];
        post?: never;
        /** Delete Item Variant By ID */
        delete: operations["deleteItemVariant"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/items/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Item ID */
                id: string;
            };
            cookie?: never;
        };
        /** Get Item by ID */
        get: operations["getItemById"];
        /** Update Item */
        put: operations["updateItem"];
        post?: never;
        /** Delete Item */
        delete: operations["deleteItem"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/instances": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get list of Instances */
        get: operations["getInstances"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/items/{itemId}/instances": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Item ID */
                itemId: string;
            };
            cookie?: never;
        };
        /** Get list of Instances For Item */
        get: operations["getInstancesByItemId"];
        put?: never;
        /** Create Instance For Item */
        post: operations["createInstanceForItem"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/instances/{instanceId}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Instance ID */
                instanceId: string;
            };
            cookie?: never;
        };
        /** Get Instance by ID */
        get: operations["getInstanceById"];
        /** Update Instance by ID */
        put: operations["updateInstanceById"];
        post?: never;
        /** Delete Instance by ID */
        delete: operations["deleteInstanceById"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api-tokens": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get list of Service API Tokens */
        get: operations["getApiTokens"];
        put?: never;
        /** Create Service API Token */
        post: operations["createApiToken"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api-tokens/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Revoke Service API Token */
        delete: operations["revokeApiToken"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/oauth2/yandex": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Exchange Yandex Access token for Session token */
        post: operations["exchangeYandexAccessToken"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/logout": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Logout user */
        get: operations["logout"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Current User */
        get: operations["getCurrentUser"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tasks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all tasks for organization */
        get: operations["getTasks"];
        put?: never;
        /** Create a task */
        post: operations["createTask"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tasks/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        /** Get Task by ID */
        get: operations["getTaskById"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tasks/{id}/pick-instance": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Pick an item from cell */
        post: operations["pickInstanceFromCell"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tasks/{id}/ready": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Mark task as awaiting to collect */
        post: operations["markTaskAsAwaiting"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tasks/{id}/completed": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Mark task as completed */
        post: operations["markTaskAsCompleted"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/employees": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get employees of the organization
         * @description Get all employees
         */
        get: operations["getEmployees"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/employees/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        /** Get employee by id */
        get: operations["getEmployeeById"];
        put?: never;
        post?: never;
        /** Delete employee by id */
        delete: operations["deleteEmployeeById"];
        options?: never;
        head?: never;
        /** Update employee by id */
        patch: operations["patchEmployeeById"];
        trace?: never;
    };
    "/employees/invite": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Invite employee to the organization
         * @description Invite employee to the organization
         */
        post: operations["inviteEmployee"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/app/roles": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all roles in system */
        get: operations["getRoles"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/audit-logs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get audit logs
         * @description Get audit logs
         */
        get: operations["getAuditLogs"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tv-boards": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get list of TV Boards */
        get: operations["getTvBoards"];
        put?: never;
        /** Create TV Board */
        post: operations["createTvBoard"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tv-boards/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Delete TV Board */
        delete: operations["deleteTvBoard"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tv-boards/{tvToken}/data": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                tvToken: string;
            };
            cookie?: never;
        };
        /** Get data for rendering on TV Board */
        get: operations["getTvBoardsData"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        ErrorContent: {
            error: {
                code: string;
                message: string;
            };
        };
        OrganizationBase: {
            /** @example Exotic */
            name: string;
            /** @example exotic */
            subdomain: string;
        };
        Organization: {
            /** Format: uuid */
            readonly id: string;
        } & components["schemas"]["OrganizationBase"];
        GetOrganizationsResponse: {
            data: components["schemas"]["Organization"][];
        };
        CreateOrganizationRequest: components["schemas"]["OrganizationBase"];
        CreateOrganizationResponse: {
            data: components["schemas"]["Organization"];
        };
        GetOrganizationByIdResponse: {
            data: components["schemas"]["Organization"];
        };
        OrganizationUpdate: {
            /** @example Exotic */
            name: string;
        };
        UpdateOrganizationResponse: {
            data: components["schemas"]["Organization"];
        };
        /** @example A1 */
        "storage-alias": string;
        UnitBase: {
            /** @example Moscow */
            name: string;
            alias: components["schemas"]["storage-alias"];
            /** @example 123 Main St, Moscow, Russia */
            address?: string | null;
        };
        Unit: {
            /**
             * Format: uuid
             * @example def3df1a-7b8f-4552-b437-a1eab851403f
             */
            readonly id: string;
        } & components["schemas"]["UnitBase"] & {
            address: string | null;
        };
        GetOrganizationUnitsResponse: {
            data: components["schemas"]["Unit"][];
        };
        CreateOrganizationUnitResponse: {
            data: components["schemas"]["Unit"];
        };
        GetOrganizationUnitByIdResponse: {
            data: components["schemas"]["Unit"];
        };
        UpdateOrganizationUnitResponse: {
            data: components["schemas"]["Unit"];
        };
        StorageGroupBase: {
            /** Format: uuid */
            parentId?: string | null;
            /** @example Main Warehouse */
            name: string;
            alias: components["schemas"]["storage-alias"];
            /** Format: uuid */
            unitId: string;
        };
        StorageGroup: {
            /** Format: uuid */
            readonly id: string;
            /** Format: uuid */
            parentId: string | null;
            /** Format: uuid */
            unitId: string;
        } & components["schemas"]["StorageGroupBase"];
        GetStorageGroupsResponse: {
            data: components["schemas"]["StorageGroup"][];
        };
        CreateStorageGroupResponse: {
            data: components["schemas"]["StorageGroup"];
        };
        GetStorageGroupByIdResponse: {
            data: components["schemas"]["StorageGroup"];
        };
        UpdateStorageGroupResponse: {
            data: components["schemas"]["StorageGroup"];
        };
        CellGroupBase: {
            name: string;
            alias: components["schemas"]["storage-alias"];
            /** Format: uuid */
            storageGroupId?: string | null;
            /** Format: uuid */
            unitId: string;
        };
        CellGroup: {
            /** Format: uuid */
            readonly id: string;
        } & components["schemas"]["CellGroupBase"] & {
            /** Format: uuid */
            storageGroupId: string | null;
        };
        GetCellsGroupsResponse: {
            data: components["schemas"]["CellGroup"][];
        };
        CreateCellsGroupRequest: components["schemas"]["CellGroupBase"];
        CreateCellsGroupResponse: {
            data: components["schemas"]["CellGroup"];
        };
        GetCellsGroupByIdResponse: {
            data: components["schemas"]["CellGroup"];
        };
        UpdateCellsGroupRequest: components["schemas"]["CellGroupBase"];
        UpdateCellsGroupResponse: {
            data: components["schemas"]["CellGroup"];
        };
        CellBase: {
            alias: string;
            row: number;
            level: number;
            position: number;
        };
        Cell: {
            /** Format: uuid */
            readonly id: string;
        } & components["schemas"]["CellBase"];
        GetCellsResponse: {
            data: components["schemas"]["Cell"][];
        };
        CreateCellRequest: components["schemas"]["CellBase"];
        CreateCellResponse: {
            data: components["schemas"]["Cell"];
        };
        GetCellByIdResponse: {
            data: components["schemas"]["Cell"];
        };
        UpdateCellRequest: components["schemas"]["CellBase"];
        UpdateCellResponse: {
            data: components["schemas"]["Cell"];
        };
        ItemBase: {
            /** Format: uuid */
            readonly id?: string;
            /** @example Item 1 */
            name: string;
            /** @example Description */
            description?: string | null;
        };
        Item: components["schemas"]["ItemBase"] & {
            /** Format: uuid */
            readonly id: string;
            description: string | null;
        };
        ItemVariantBase: {
            /** @example Variant 1 */
            name: string;
            /** @example 123456789012 */
            article?: string | null;
            /**
             * Format: int64
             * @example 1234567890123
             */
            ean13?: number | null;
        };
        ItemVariant: {
            /** Format: uuid */
            readonly id: string;
        } & components["schemas"]["ItemVariantBase"] & {
            /** @example 123456789012 */
            article: string | null;
            /**
             * Format: int64
             * @example 1234567890123
             */
            ean13: number | null;
        };
        ItemForList: components["schemas"]["Item"] & {
            variants: components["schemas"]["ItemVariant"][];
        };
        GetItemsResponse: {
            data: components["schemas"]["ItemForList"][];
        };
        ItemCreate: components["schemas"]["ItemBase"];
        CreateItemRequest: components["schemas"]["ItemCreate"];
        CellForInstance: components["schemas"]["Cell"] & {
            cellPath: {
                /** Format: uuid */
                id: string;
                name: string;
                alias: string;
                /** @enum {string} */
                objectType: "cell" | "cells_group" | "storage_group" | "unit";
            }[];
        };
        CellForInstanceOptional: components["schemas"]["CellForInstance"] | null;
        InstanceForItem: {
            /** Format: uuid */
            id: string;
            /** @enum {string} */
            status: "available" | "reserved" | "consumed";
            /** Format: uuid */
            affectedByTaskId?: string | null;
            variant: components["schemas"]["ItemVariant"];
            cell: components["schemas"]["CellForInstanceOptional"];
        };
        ItemFull: components["schemas"]["Item"] & {
            variants: components["schemas"]["ItemVariant"][];
            items: components["schemas"]["InstanceForItem"][];
        };
        CreateItemResponse: {
            data: components["schemas"]["ItemFull"];
        };
        GetItemVariantsResponse: {
            data: components["schemas"]["ItemVariant"][];
        };
        CreateItemVariantRequest: components["schemas"]["ItemVariantBase"];
        CreateItemVariantResponse: {
            data: components["schemas"]["ItemVariant"];
        };
        GetItemVariantByIdResponse: {
            data: components["schemas"]["ItemVariant"];
        };
        UpdateItemVariantRequest: components["schemas"]["ItemVariantBase"];
        UpdateItemVariantResponse: {
            data: components["schemas"]["ItemVariant"];
        };
        GetItemByIdResponse: {
            data: components["schemas"]["ItemFull"];
        };
        UpdateItemRequest: components["schemas"]["ItemCreate"];
        UpdateItemResponse: {
            data: components["schemas"]["ItemFull"];
        };
        InstanceFull: {
            /**
             * Format: uuid
             * @description Instance ID
             */
            readonly id: string;
            /** @enum {string} */
            status: "available" | "reserved" | "consumed";
            item: components["schemas"]["ItemForList"];
            /** Format: uuid */
            affectedByTaskId?: string | null;
            variant: components["schemas"]["ItemVariant"];
            cell: components["schemas"]["CellForInstanceOptional"];
        };
        GetInstancesResponse: {
            data: components["schemas"]["InstanceFull"][];
        };
        GetInstancesByItemIdResponse: {
            data: components["schemas"]["InstanceForItem"][];
        };
        InstanceCreateForItem: {
            /** Format: uuid */
            variantId: string;
            /** Format: uuid */
            cellId: string;
        };
        CreateInstanceForItemRequest: components["schemas"]["InstanceCreateForItem"];
        CreateInstanceForItemResponse: {
            data: components["schemas"]["InstanceForItem"];
        };
        GetInstanceByIdResponse: {
            data: components["schemas"]["InstanceFull"];
        };
        UpdateInstanceRequest: components["schemas"]["InstanceCreateForItem"];
        UpdateInstanceResponse: {
            data: components["schemas"]["InstanceFull"];
        };
        Token: {
            /** Format: uuid */
            readonly id: string;
            /** @description The name of the token */
            name: string;
            /** @description The token secret */
            token: string;
        };
        GetApiTokensResponse: {
            data: components["schemas"]["Token"][];
        };
        TokenCreate: {
            /** @description The name of the token */
            name: string;
        };
        CreateApiTokenRequest: components["schemas"]["TokenCreate"];
        CreateApiTokenResponse: {
            data: components["schemas"]["Token"];
        };
        User: {
            /** Format: uuid */
            id: string;
            first_name: string;
            last_name: string;
            middle_name: string | null;
            email: string;
        };
        GetCurrentUserResponse: components["schemas"]["User"];
        Role: {
            id: number;
            name: string;
            displayName: string;
            description: string;
        };
        Employee: {
            /** Format: uuid */
            userId: string;
            firstName: string;
            lastName: string;
            middleName: string | null;
            email: string;
            role: components["schemas"]["Role"];
        };
        EmployeeOptional: components["schemas"]["Employee"] | null;
        TaskBase: {
            /** Format: uuid */
            readonly id: string;
            name: string;
            description: string | null;
            /** @enum {string} */
            type: "pickment" | "movement";
            /** @enum {string} */
            status: "pending" | "in_progress" | "ready" | "completed" | "cancelled";
            /** Format: date-time */
            createdAt: string;
            unit: components["schemas"]["Unit"];
            assignedTo: components["schemas"]["EmployeeOptional"];
            /** Format: date-time */
            assignedAt: string | null;
            /** Format: date-time */
            completedAt: string | null;
        };
        GetTasksResponse: {
            data: components["schemas"]["TaskBase"][];
        };
        TaskCreate: {
            name: string;
            description?: string | null;
            /** @enum {string} */
            type: "pickment" | "movement";
            /** Format: uuid */
            unitId: string;
            /** Format: uuid */
            assignedTo?: string | null;
            items?: {
                /** Format: uuid */
                instanceId: string;
                /** Format: uuid */
                targetCellId?: string;
            }[];
        };
        CreateTaskRequest: components["schemas"]["TaskCreate"];
        TaskItem: {
            instance: components["schemas"]["InstanceFull"];
            sourceCell: components["schemas"]["CellForInstance"];
            targetCell: components["schemas"]["CellForInstanceOptional"];
            /** @enum {string} */
            status: "pending" | "picked";
        };
        TaskFull: components["schemas"]["TaskBase"] & {
            items: components["schemas"]["TaskItem"][];
        };
        CreateTaskResponse: {
            data: components["schemas"]["TaskFull"];
        };
        GetTaskResponse: {
            data: components["schemas"]["TaskFull"];
        };
        GetEmployeesResponse: {
            data: components["schemas"]["Employee"][];
        };
        GetEmployeeResponse: {
            data: components["schemas"]["Employee"];
        };
        PatchEmployeeRequest: {
            /** Format: uuid */
            userId: string;
            roleId?: number;
        };
        InviteEmployeeRequest: {
            email: string;
            roleId: number;
        };
        AuditLog: {
            /** Format: uuid */
            id: string;
            employee: components["schemas"]["Employee"];
            /** @enum {string} */
            action: "create" | "update" | "delete";
            /** Format: date-time */
            time: string;
            targetObjectType: {
                id: number;
                group: string;
                name: string;
            };
            /** Format: uuid */
            targetObjectId: string;
            prechangeState: {
                [key: string]: unknown;
            } | null;
            postchangeState: {
                [key: string]: unknown;
            } | null;
        };
        GetAuditLogsResponse: {
            data: components["schemas"]["AuditLog"][];
        };
        TvBoard: {
            /** Format: uuid */
            id: string;
            /** @description The name of the TV Board */
            name: string;
            readonly token: string;
            unit: components["schemas"]["Unit"];
        };
        GetTvBoardsResponse: {
            data: components["schemas"]["TvBoard"][];
        };
        TvBoardBase: {
            /** @description The name of the TV Board */
            name: string;
            /**
             * Format: uuid
             * @description The ID of the unit that the TV Board belongs to
             */
            unitId: string;
        };
        CreateTvBoardRequest: components["schemas"]["TvBoardBase"];
        CreateTvBoardResponse: {
            data: components["schemas"]["TvBoard"];
        };
        GetTvBoardDataResponse: {
            data: {
                tvBoard: components["schemas"]["TvBoard"];
                tasks: components["schemas"]["TaskBase"][];
            };
        };
    };
    responses: {
        /** @description General Error */
        "default-error": {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["ErrorContent"];
            };
        };
        /** @description Unauthorized */
        "default-unauthorized": {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["ErrorContent"];
            };
        };
        /** @description Not Found */
        "default-not-found": {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["ErrorContent"];
            };
        };
        /** @description Bad Request */
        "default-bad-request": {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["ErrorContent"];
            };
        };
        /** @description Conflict, resource duplication */
        "default-conflict": {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["ErrorContent"];
            };
        };
        /** @description Forbidden */
        "default-forbidden": {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["ErrorContent"];
            };
        };
        /** @description Successful operation */
        "default-no-content": {
            headers: {
                [name: string]: unknown;
            };
            content?: never;
        };
        /** @description Auth response */
        AuthResponse: {
            headers: {
                "Set-Cookie": string;
                [name: string]: unknown;
            };
            content?: never;
        };
        /** @description Logout response */
        LogoutResponse: {
            headers: {
                "Set-Cookie": string;
                [name: string]: unknown;
            };
            content?: never;
        };
    };
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    getOrganizations: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetOrganizationsResponse"];
                };
            };
            401: components["responses"]["default-unauthorized"];
            404: components["responses"]["default-not-found"];
            default: components["responses"]["default-error"];
        };
    };
    createOrganization: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateOrganizationRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreateOrganizationResponse"];
                };
            };
            400: components["responses"]["default-bad-request"];
            401: components["responses"]["default-unauthorized"];
            409: components["responses"]["default-conflict"];
            default: components["responses"]["default-error"];
        };
    };
    getOrganizationById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Organization ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetOrganizationByIdResponse"];
                };
            };
            401: components["responses"]["default-unauthorized"];
            403: components["responses"]["default-forbidden"];
            404: components["responses"]["default-not-found"];
            default: components["responses"]["default-error"];
        };
    };
    updateOrganization: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Organization ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["OrganizationUpdate"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UpdateOrganizationResponse"];
                };
            };
            400: components["responses"]["default-bad-request"];
            401: components["responses"]["default-unauthorized"];
            403: components["responses"]["default-forbidden"];
            404: components["responses"]["default-not-found"];
            default: components["responses"]["default-error"];
        };
    };
    deleteOrganization: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Organization ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            204: components["responses"]["default-no-content"];
            401: components["responses"]["default-unauthorized"];
            403: components["responses"]["default-forbidden"];
            404: components["responses"]["default-not-found"];
            default: components["responses"]["default-error"];
        };
    };
    getOrganizationUnits: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetOrganizationUnitsResponse"];
                };
            };
            401: components["responses"]["default-unauthorized"];
            403: components["responses"]["default-forbidden"];
            404: components["responses"]["default-not-found"];
            default: components["responses"]["default-error"];
        };
    };
    createUnit: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UnitBase"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreateOrganizationUnitResponse"];
                };
            };
            400: components["responses"]["default-bad-request"];
            401: components["responses"]["default-unauthorized"];
            403: components["responses"]["default-forbidden"];
            default: components["responses"]["default-error"];
        };
    };
    getOrganizationUnitById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Unit ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetOrganizationUnitByIdResponse"];
                };
            };
            401: components["responses"]["default-unauthorized"];
            403: components["responses"]["default-forbidden"];
            404: components["responses"]["default-not-found"];
            default: components["responses"]["default-error"];
        };
    };
    updateOrganizationUnit: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Unit ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UnitBase"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UpdateOrganizationUnitResponse"];
                };
            };
            400: components["responses"]["default-bad-request"];
            401: components["responses"]["default-unauthorized"];
            403: components["responses"]["default-forbidden"];
            404: components["responses"]["default-not-found"];
            default: components["responses"]["default-error"];
        };
    };
    deleteOrganizationUnit: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Unit ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            204: components["responses"]["default-no-content"];
            401: components["responses"]["default-unauthorized"];
            403: components["responses"]["default-forbidden"];
            404: components["responses"]["default-not-found"];
            default: components["responses"]["default-error"];
        };
    };
    getStorageGroups: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetStorageGroupsResponse"];
                };
            };
            401: components["responses"]["default-unauthorized"];
            403: components["responses"]["default-forbidden"];
            404: components["responses"]["default-not-found"];
            default: components["responses"]["default-error"];
        };
    };
    createStorageGroup: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["StorageGroupBase"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreateStorageGroupResponse"];
                };
            };
            400: components["responses"]["default-bad-request"];
            401: components["responses"]["default-unauthorized"];
            403: components["responses"]["default-forbidden"];
            default: components["responses"]["default-error"];
        };
    };
    getStorageGroupById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Storage Group ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetStorageGroupByIdResponse"];
                };
            };
            401: components["responses"]["default-unauthorized"];
            403: components["responses"]["default-forbidden"];
            404: components["responses"]["default-not-found"];
            default: components["responses"]["default-error"];
        };
    };
    updateStorageGroup: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Storage Group ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["StorageGroupBase"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UpdateStorageGroupResponse"];
                };
            };
            400: components["responses"]["default-bad-request"];
            401: components["responses"]["default-unauthorized"];
            403: components["responses"]["default-forbidden"];
            404: components["responses"]["default-not-found"];
            default: components["responses"]["default-error"];
        };
    };
    deleteStorageGroup: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Storage Group ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            204: components["responses"]["default-no-content"];
            401: components["responses"]["default-unauthorized"];
            403: components["responses"]["default-forbidden"];
            404: components["responses"]["default-not-found"];
            default: components["responses"]["default-error"];
        };
    };
    getCellsGroups: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetCellsGroupsResponse"];
                };
            };
            401: components["responses"]["default-unauthorized"];
            403: components["responses"]["default-forbidden"];
            404: components["responses"]["default-not-found"];
            default: components["responses"]["default-error"];
        };
    };
    createCellsGroup: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateCellsGroupRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreateCellsGroupResponse"];
                };
            };
            400: components["responses"]["default-bad-request"];
            401: components["responses"]["default-unauthorized"];
            403: components["responses"]["default-forbidden"];
            default: components["responses"]["default-error"];
        };
    };
    getCellsGroupById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Cells Group ID */
                groupId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetCellsGroupByIdResponse"];
                };
            };
            401: components["responses"]["default-unauthorized"];
            403: components["responses"]["default-forbidden"];
            404: components["responses"]["default-not-found"];
            default: components["responses"]["default-error"];
        };
    };
    updateCellsGroup: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Cells Group ID */
                groupId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateCellsGroupRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UpdateCellsGroupResponse"];
                };
            };
            400: components["responses"]["default-bad-request"];
            401: components["responses"]["default-unauthorized"];
            403: components["responses"]["default-forbidden"];
            404: components["responses"]["default-not-found"];
            default: components["responses"]["default-error"];
        };
    };
    deleteCellsGroup: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Cells Group ID */
                groupId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            401: components["responses"]["default-unauthorized"];
            403: components["responses"]["default-forbidden"];
            404: components["responses"]["default-not-found"];
            default: components["responses"]["default-error"];
        };
    };
    getCells: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                groupId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetCellsResponse"];
                };
            };
            401: components["responses"]["default-unauthorized"];
            403: components["responses"]["default-forbidden"];
            404: components["responses"]["default-not-found"];
            default: components["responses"]["default-error"];
        };
    };
    createCell: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                groupId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateCellRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreateCellResponse"];
                };
            };
            400: components["responses"]["default-bad-request"];
            401: components["responses"]["default-unauthorized"];
            403: components["responses"]["default-forbidden"];
            default: components["responses"]["default-error"];
        };
    };
    getCellById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetCellByIdResponse"];
                };
            };
            401: components["responses"]["default-unauthorized"];
            403: components["responses"]["default-forbidden"];
            404: components["responses"]["default-not-found"];
            default: components["responses"]["default-error"];
        };
    };
    updateCell: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateCellRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UpdateCellResponse"];
                };
            };
            400: components["responses"]["default-bad-request"];
            401: components["responses"]["default-unauthorized"];
            403: components["responses"]["default-forbidden"];
            404: components["responses"]["default-not-found"];
            default: components["responses"]["default-error"];
        };
    };
    deleteCell: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            401: components["responses"]["default-unauthorized"];
            403: components["responses"]["default-forbidden"];
            404: components["responses"]["default-not-found"];
            default: components["responses"]["default-error"];
        };
    };
    getItems: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetItemsResponse"];
                };
            };
            401: components["responses"]["default-unauthorized"];
            403: components["responses"]["default-forbidden"];
            404: components["responses"]["default-not-found"];
            default: components["responses"]["default-error"];
        };
    };
    createItem: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateItemRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreateItemResponse"];
                };
            };
            400: components["responses"]["default-bad-request"];
            401: components["responses"]["default-unauthorized"];
            403: components["responses"]["default-forbidden"];
            default: components["responses"]["default-error"];
        };
    };
    getItemVariants: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Item ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetItemVariantsResponse"];
                };
            };
            401: components["responses"]["default-unauthorized"];
            403: components["responses"]["default-forbidden"];
            404: components["responses"]["default-not-found"];
            default: components["responses"]["default-error"];
        };
    };
    createItemVariant: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Item ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateItemVariantRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreateItemVariantResponse"];
                };
            };
            400: components["responses"]["default-bad-request"];
            401: components["responses"]["default-unauthorized"];
            403: components["responses"]["default-forbidden"];
            default: components["responses"]["default-error"];
        };
    };
    getItemVariantById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Item ID */
                id: string;
                /** @description Variant ID */
                variantId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetItemVariantByIdResponse"];
                };
            };
            401: components["responses"]["default-unauthorized"];
            403: components["responses"]["default-forbidden"];
            404: components["responses"]["default-not-found"];
            default: components["responses"]["default-error"];
        };
    };
    updateItemVariant: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Item ID */
                id: string;
                /** @description Variant ID */
                variantId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateItemVariantRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UpdateItemVariantResponse"];
                };
            };
            400: components["responses"]["default-bad-request"];
            401: components["responses"]["default-unauthorized"];
            403: components["responses"]["default-forbidden"];
            404: components["responses"]["default-not-found"];
            default: components["responses"]["default-error"];
        };
    };
    deleteItemVariant: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Item ID */
                id: string;
                /** @description Variant ID */
                variantId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            401: components["responses"]["default-unauthorized"];
            403: components["responses"]["default-forbidden"];
            404: components["responses"]["default-not-found"];
            default: components["responses"]["default-error"];
        };
    };
    getItemById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Item ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetItemByIdResponse"];
                };
            };
            401: components["responses"]["default-unauthorized"];
            403: components["responses"]["default-forbidden"];
            404: components["responses"]["default-not-found"];
            default: components["responses"]["default-error"];
        };
    };
    updateItem: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Item ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateItemRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UpdateItemResponse"];
                };
            };
            400: components["responses"]["default-bad-request"];
            403: components["responses"]["default-forbidden"];
            404: components["responses"]["default-not-found"];
            default: components["responses"]["default-error"];
        };
    };
    deleteItem: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Item ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            401: components["responses"]["default-unauthorized"];
            403: components["responses"]["default-forbidden"];
            404: components["responses"]["default-not-found"];
            default: components["responses"]["default-error"];
        };
    };
    getInstances: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetInstancesResponse"];
                };
            };
            401: components["responses"]["default-unauthorized"];
            403: components["responses"]["default-forbidden"];
            404: components["responses"]["default-not-found"];
            default: components["responses"]["default-error"];
        };
    };
    getInstancesByItemId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Item ID */
                itemId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetInstancesByItemIdResponse"];
                };
            };
            401: components["responses"]["default-unauthorized"];
            403: components["responses"]["default-forbidden"];
            404: components["responses"]["default-not-found"];
            default: components["responses"]["default-error"];
        };
    };
    createInstanceForItem: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Item ID */
                itemId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateInstanceForItemRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreateInstanceForItemResponse"];
                };
            };
            400: components["responses"]["default-bad-request"];
            401: components["responses"]["default-unauthorized"];
            403: components["responses"]["default-forbidden"];
            default: components["responses"]["default-error"];
        };
    };
    getInstanceById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Instance ID */
                instanceId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetInstanceByIdResponse"];
                };
            };
            401: components["responses"]["default-unauthorized"];
            403: components["responses"]["default-forbidden"];
            404: components["responses"]["default-not-found"];
            default: components["responses"]["default-error"];
        };
    };
    updateInstanceById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Instance ID */
                instanceId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateInstanceRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UpdateInstanceResponse"];
                };
            };
            400: components["responses"]["default-bad-request"];
            401: components["responses"]["default-unauthorized"];
            403: components["responses"]["default-forbidden"];
            404: components["responses"]["default-not-found"];
            default: components["responses"]["default-error"];
        };
    };
    deleteInstanceById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Instance ID */
                instanceId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            401: components["responses"]["default-unauthorized"];
            403: components["responses"]["default-forbidden"];
            404: components["responses"]["default-not-found"];
            default: components["responses"]["default-error"];
        };
    };
    getApiTokens: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetApiTokensResponse"];
                };
            };
            401: components["responses"]["default-unauthorized"];
            403: components["responses"]["default-forbidden"];
            404: components["responses"]["default-not-found"];
            default: components["responses"]["default-error"];
        };
    };
    createApiToken: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateApiTokenRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreateApiTokenResponse"];
                };
            };
            400: components["responses"]["default-bad-request"];
            401: components["responses"]["default-unauthorized"];
            403: components["responses"]["default-forbidden"];
            default: components["responses"]["default-error"];
        };
    };
    revokeApiToken: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            401: components["responses"]["default-unauthorized"];
            403: components["responses"]["default-forbidden"];
            404: components["responses"]["default-not-found"];
            default: components["responses"]["default-error"];
        };
    };
    exchangeYandexAccessToken: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description Yandex Access token received from Yandex OAuth on Frontend */
                    access_token: string;
                };
            };
        };
        responses: {
            200: components["responses"]["AuthResponse"];
            400: components["responses"]["default-bad-request"];
            default: components["responses"]["default-error"];
        };
    };
    logout: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["LogoutResponse"];
            400: components["responses"]["default-bad-request"];
            default: components["responses"]["default-error"];
        };
    };
    getCurrentUser: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetCurrentUserResponse"];
                };
            };
            401: components["responses"]["default-unauthorized"];
            default: components["responses"]["default-error"];
        };
    };
    getTasks: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetTasksResponse"];
                };
            };
            401: components["responses"]["default-unauthorized"];
            403: components["responses"]["default-forbidden"];
            404: components["responses"]["default-not-found"];
            default: components["responses"]["default-error"];
        };
    };
    createTask: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateTaskRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreateTaskResponse"];
                };
            };
            400: components["responses"]["default-bad-request"];
            401: components["responses"]["default-unauthorized"];
            403: components["responses"]["default-forbidden"];
            default: components["responses"]["default-error"];
        };
    };
    getTaskById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetTaskResponse"];
                };
            };
            401: components["responses"]["default-unauthorized"];
            403: components["responses"]["default-forbidden"];
            404: components["responses"]["default-not-found"];
            default: components["responses"]["default-error"];
        };
    };
    pickInstanceFromCell: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** Format: uuid */
                    instanceId: string;
                };
            };
        };
        responses: {
            /** @description Successful operation */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: components["responses"]["default-bad-request"];
            401: components["responses"]["default-unauthorized"];
            403: components["responses"]["default-forbidden"];
            default: components["responses"]["default-error"];
        };
    };
    markTaskAsAwaiting: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: components["responses"]["default-bad-request"];
            401: components["responses"]["default-unauthorized"];
            403: components["responses"]["default-forbidden"];
            default: components["responses"]["default-error"];
        };
    };
    markTaskAsCompleted: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: components["responses"]["default-bad-request"];
            401: components["responses"]["default-unauthorized"];
            403: components["responses"]["default-forbidden"];
            default: components["responses"]["default-error"];
        };
    };
    getEmployees: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A list of employees */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetEmployeesResponse"];
                };
            };
            401: components["responses"]["default-unauthorized"];
            403: components["responses"]["default-forbidden"];
            404: components["responses"]["default-not-found"];
            default: components["responses"]["default-error"];
        };
    };
    getEmployeeById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A single employee */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetEmployeeResponse"];
                };
            };
            401: components["responses"]["default-unauthorized"];
            403: components["responses"]["default-forbidden"];
            404: components["responses"]["default-not-found"];
            default: components["responses"]["default-error"];
        };
    };
    deleteEmployeeById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Employee deleted successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            401: components["responses"]["default-unauthorized"];
            403: components["responses"]["default-forbidden"];
            404: components["responses"]["default-not-found"];
            default: components["responses"]["default-error"];
        };
    };
    patchEmployeeById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PatchEmployeeRequest"];
            };
        };
        responses: {
            /** @description A single employee */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetEmployeeResponse"];
                };
            };
            400: components["responses"]["default-bad-request"];
            401: components["responses"]["default-unauthorized"];
            403: components["responses"]["default-forbidden"];
            404: components["responses"]["default-not-found"];
            default: components["responses"]["default-error"];
        };
    };
    inviteEmployee: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["InviteEmployeeRequest"];
            };
        };
        responses: {
            /** @description Employee invited successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetEmployeeResponse"];
                };
            };
            400: components["responses"]["default-bad-request"];
            401: components["responses"]["default-unauthorized"];
            403: components["responses"]["default-forbidden"];
            default: components["responses"]["default-error"];
        };
    };
    getRoles: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of roles */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Role"][];
                    };
                };
            };
            401: components["responses"]["default-unauthorized"];
            404: components["responses"]["default-not-found"];
            default: components["responses"]["default-error"];
        };
    };
    getAuditLogs: {
        parameters: {
            query?: {
                /** @description The type of the object to filter by */
                object_type_id?: number;
                /** @description The id of the object to filter by */
                object_id?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Audit logs */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetAuditLogsResponse"];
                };
            };
            401: components["responses"]["default-unauthorized"];
            403: components["responses"]["default-forbidden"];
            404: components["responses"]["default-not-found"];
            default: components["responses"]["default-error"];
        };
    };
    getTvBoards: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetTvBoardsResponse"];
                };
            };
            401: components["responses"]["default-unauthorized"];
            403: components["responses"]["default-forbidden"];
            404: components["responses"]["default-not-found"];
            default: components["responses"]["default-error"];
        };
    };
    createTvBoard: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateTvBoardRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreateTvBoardResponse"];
                };
            };
            400: components["responses"]["default-bad-request"];
            401: components["responses"]["default-unauthorized"];
            403: components["responses"]["default-forbidden"];
            default: components["responses"]["default-error"];
        };
    };
    deleteTvBoard: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            401: components["responses"]["default-unauthorized"];
            403: components["responses"]["default-forbidden"];
            404: components["responses"]["default-not-found"];
            default: components["responses"]["default-error"];
        };
    };
    getTvBoardsData: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                tvToken: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetTvBoardDataResponse"];
                };
            };
            401: components["responses"]["default-unauthorized"];
            404: components["responses"]["default-not-found"];
            default: components["responses"]["default-error"];
        };
    };
}
